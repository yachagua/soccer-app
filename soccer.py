import streamlit as st
import pandas as pd
from datetime import datetime
import pytz

# Configuraci√≥n inicial
st.set_page_config(page_title="SofaScore", layout="wide")

# Inicializar almacenamiento
if "eventos" not in st.session_state:
    st.session_state.eventos = pd.DataFrame(
        columns=["FechaHora", "Minuto", "Jugador", "Posicion", "Equipo", "Evento", "Observacion"]
    )

if "jugadores" not in st.session_state:
    st.session_state.jugadores = {}

if "active_tab" not in st.session_state:
    st.session_state.active_tab = "‚öΩ Eventos"  # arrancar en eventos

if "observacion" not in st.session_state:
    st.session_state.observacion = ""  # valor inicial vac√≠o

# --- Control de pesta√±as con radio ---
st.sidebar.title("üìå Navegaci√≥n")
tab = st.sidebar.radio(
    "Ir a:", 
    ["üë• N√≥minas", "‚öΩ Eventos"], 
    index=0 if st.session_state.active_tab == "üë• N√≥minas" else 1
)
st.session_state.active_tab = tab

# --- TAB 1: Registrar n√≥minas ---
if st.session_state.active_tab == "üë• N√≥minas":
    st.header("üë• Registrar equipos y jugadores")

    equipo = st.text_input("Nombre del equipo")
    jugador = st.text_input("Nombre del jugador")
    posicion = st.text_input("Posici√≥n del jugador")  # üëà campo posici√≥n
    inicialista = st.selectbox("¬øInicialista?", ["S√≠", "No"])  # üëà nuevo campo
    agregar = st.button("‚ûï Agregar jugador")

    if agregar and equipo and jugador and posicion:
        if equipo not in st.session_state.jugadores:
            st.session_state.jugadores[equipo] = []
        jugador_data = {"nombre": jugador, "posicion": posicion, "inicialista": inicialista}
        if jugador_data not in st.session_state.jugadores[equipo]:
            st.session_state.jugadores[equipo].append(jugador_data)
            st.success(f"Jugador {jugador} ({posicion}) agregado al equipo {equipo} [{inicialista}]")

    if st.session_state.jugadores:
        st.subheader("üìã N√≥minas registradas")
        for eq, jugadores in st.session_state.jugadores.items():
            lista_jugadores = [
                f"{j['nombre']} ({j['posicion']}) - Inicialista: {j['inicialista']}"
                for j in jugadores
            ]
            st.write(f"**{eq}**: {', '.join(lista_jugadores)}")
    else:
        st.info("No hay jugadores registrados todav√≠a.")

# --- TAB 2: Registrar eventos ---
if st.session_state.active_tab == "‚öΩ Eventos":
    st.header("‚öΩ Registrar eventos del partido")

    evento = st.selectbox(
        "Evento",
        [
            "Comienza el encuentro","Asistencia","Bal√≥n Perdido","Duelo Ganado","Duelo Perdido","Falta cometida",
            "Falta recibida","Fuera de lugar","Lesionado","Gol","Pase clave","Pase completado","Pase perdido","Recuperaciones",
            "Regate Exitoso","Regate Fallido","Tarjeta amarilla","Tarjeta roja","Tiro al arco",
            "Tiro desviado","Tiro de esquina","Comienza el segundo tiempo","Medio Tiempo","Finaliza el encuentro",
            "Marcador Final","Sustituci√≥n Entrada","Sustituci√≥n Salida"  # üëà nuevos eventos
        ]
    )

    minuto = st.number_input("Minuto", min_value=0, max_value=120, step=1)

    jugador, posicion, equipo = "", "", ""
    eventos_sin_jugador = ["Comienza el encuentro", "Medio Tiempo","Comienza el segundo tiempo", "Finaliza el encuentro", "Marcador Final"]

    if evento not in eventos_sin_jugador and st.session_state.jugadores:
        equipo = st.selectbox("Equipo", options=list(st.session_state.jugadores.keys()))
        jugadores_equipo = st.session_state.jugadores[equipo]
        jugador_seleccionado = st.selectbox(
            "Jugador", 
            options=[f"{j['nombre']} ({j['posicion']})" for j in jugadores_equipo]
        )
        # Dividir nombre y posici√≥n
        jugador = jugador_seleccionado.split(" (")[0]
        posicion = jugador_seleccionado.split(" (")[1].replace(")", "")

    # Observaci√≥n ligada al session_state
    observacion = st.text_area(
        "Observaci√≥n (opcional)",
        placeholder="Ej: tiro libre al √°ngulo, falta fuerte, golazo...",
        key="observacion"
    )

    # Funci√≥n callback para guardar evento
    def guardar_evento():
        hora_colombia = datetime.now(pytz.timezone("America/Bogota")).strftime("%Y-%m-%d %H:%M:%S")
        nuevo_evento = {
            "FechaHora": hora_colombia,
            "Minuto": minuto,
            "Jugador": jugador,
            "Posicion": posicion,
            "Equipo": equipo,
            "Evento": evento,
            "Observacion": st.session_state.observacion
        }
        st.session_state.eventos = pd.concat(
            [st.session_state.eventos, pd.DataFrame([nuevo_evento])],
            ignore_index=True
        )
        st.success(f"Evento registrado: {evento} en el minuto {minuto}")
        st.session_state.active_tab = "‚öΩ Eventos"  # quedarse en eventos
        st.session_state.observacion = ""          # limpiar observaci√≥n üëà

    st.button("‚ûï Guardar evento", on_click=guardar_evento)

    # --- Mostrar eventos ---
    st.subheader("üìã Eventos registrados")
    st.dataframe(st.session_state.eventos, use_container_width=True)

    # --- Estad√≠sticas ---
    st.subheader("üìä Estad√≠sticas por jugador")

    def calcular_minutos(nomina_dict, eventos_df, duracion=90):
        resultados = []
        for equipo, jugadores in nomina_dict.items():
            for j in jugadores:
                jugador = j["nombre"]
                posicion = j["posicion"]
                inicialista = j["inicialista"]

                # Minuto de inicio
                if inicialista == "S√≠":
                    inicio = 0
                else:
                    entradas = eventos_df[(eventos_df["Jugador"] == jugador) & 
                                          (eventos_df["Evento"] == "Sustituci√≥n Entrada")]
                    inicio = entradas["Minuto"].min() if not entradas.empty else None

                # Minuto de salida
                salidas = eventos_df[(eventos_df["Jugador"] == jugador) & 
                                     (eventos_df["Evento"] == "Sustituci√≥n Salida")]
                fin = salidas["Minuto"].min() if not salidas.empty else duracion

                # C√°lculo
                if inicio is not None:
                    minutos = fin - inicio
                else:
                    minutos = 0

                resultados.append([jugador, posicion, equipo, inicialista, minutos])
        
        return pd.DataFrame(resultados, columns=["Jugador", "Posici√≥n", "Equipo", "Inicialista", "Minutos Jugados"])

    if not st.session_state.eventos.empty:
        # Estad√≠sticas de eventos
        st.session_state.eventos["JugadorCompleto"] = (
            st.session_state.eventos["Jugador"] + " (" + st.session_state.eventos["Posicion"] + ")"
        )
        stats_eventos = st.session_state.eventos.groupby(["JugadorCompleto", "Evento"]).size().unstack(fill_value=0)
        st.dataframe(stats_eventos, use_container_width=True)

        # Minutos jugados
        df_minutos = calcular_minutos(st.session_state.jugadores, st.session_state.eventos, duracion=90)
        st.subheader("‚è±Ô∏è Minutos jugados")
        st.dataframe(df_minutos, use_container_width=True)
    else:
        st.info("A√∫n no hay eventos registrados.")
